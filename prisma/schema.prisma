generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model food_item {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String       @db.VarChar(255)
  description String?      @db.VarChar(255)
  price       Int
  vendor_id   String       @db.Uuid
  created_at  DateTime     @default(now()) @db.Timestamp(6)
  updated_at  DateTime     @default(now()) @db.Timestamp(6)
  vendor      vendor       @relation(fields: [vendor_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  order_item  order_item[]
}

model order {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  total_price Int
  status      String       @db.VarChar(255)
  user_id     String       @db.Uuid
  vendor_id   String       @db.Uuid
  created_at  DateTime     @default(now()) @db.Timestamp(6)
  updated_at  DateTime     @default(now()) @db.Timestamp(6)
  user        user         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  vendor      vendor       @relation(fields: [vendor_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  order_item  order_item[]
}

model order_item {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  quantity     Int
  food_item_id String    @db.Uuid
  order_id     String    @db.Uuid
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  updated_at   DateTime  @default(now()) @db.Timestamp(6)
  food_item    food_item @relation(fields: [food_item_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  order        order     @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model search_history {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  search_term String   @db.VarChar(255)
  user_id     String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user        user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email          String           @unique @db.VarChar(255)
  firstName      String?          @db.VarChar(255)
  lastName       String?          @db.VarChar(255)
  roq_user_id    String           @db.VarChar(255)
  tenant_id      String           @db.VarChar(255)
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  updated_at     DateTime         @default(now()) @db.Timestamp(6)
  order          order[]
  search_history search_history[]
  vendor         vendor[]
}

model vendor {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?     @db.VarChar(255)
  name        String      @db.VarChar(255)
  created_at  DateTime    @default(now()) @db.Timestamp(6)
  updated_at  DateTime    @default(now()) @db.Timestamp(6)
  user_id     String      @db.Uuid
  tenant_id   String      @db.VarChar(255)
  food_item   food_item[]
  order       order[]
  user        user        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
